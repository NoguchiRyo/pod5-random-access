name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

permissions:
  contents: read

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: 
          - { version: '3.10', tag: 'cp310' }
          - { version: '3.11', tag: 'cp311' }
          - { version: '3.12', tag: 'cp312' }
        platform:
          - linux
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Build manylinux wheels
        uses: pypa/cibuildwheel@v3.0.1
        env:
          CIBW_BUILD: "${{ matrix.python.tag }}-*"
          CIBW_ARCHS: x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_34
          
          CIBW_BEFORE_BUILD_LINUX: |
            set -ex
            dnf install -y 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm'
            dnf install -y https://apache.jfrog.io/artifactory/arrow/almalinux/9/apache-arrow-release-latest.rpm
            dnf install -y python${PY_VER}-devel
            dnf install -y \
              libzstd-devel \
              arrow-devel-12.0.1 \

            echo "Building flatbuffers"
            git clone --depth 1 --branch v2.0.8 https://github.com/google/flatbuffers.git
            cd flatbuffers
            cmake -B build -DCMAKE_INSTALL_PREFIX:PATH=/usr/local -DFLATBUFFERS_BUILD_TESTS=OFF
            cmake --build build --target install
            cd ..

            echo "Adding symbolic links"
            ln -s /usr/local/lib64/cmake/flatbuffers/FlatBuffersConfig.cmake /usr/local/lib64/cmake/flatbuffers/FlatbuffersConfig.cmake

            echo "Building pod5_random_access_pybind"
            cmake -B build -DCMAKE_BUILD_TYPE=Release 
            cmake --build build -j
            cmake --install build

            echo "=== Build directory structure ==="
            find build -type f | sort
            
            echo -e "\n=== Shared libraries ==="
            find build -type f \( -name "*.so" -o -name "*.dylib" \) -exec ls -lh {} \;
            
            echo -e "\n=== pod5_random_access contents ==="
            ls -la pod5_random_access/
            

          # Test that the wheel imports correctly
          CIBW_TEST_COMMAND: "python -c 'import pod5_random_access; from pod5_random_access.pod5_random_access_pybind import Pod5Index; print(\"✅ Import successful!\")'"
          
          # Skip musllinux and pypy for now
          CIBW_SKIP: "*-musllinux* pp*"
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.python.tag }}
          path: wheelhouse

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python: 
          - { version: '3.10', tag: 'cp310' }
          - { version: '3.11', tag: 'cp311' }
          - { version: '3.12', tag: 'cp312' }
        architecture: ['AMD64']
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      
      - name: Build Windows wheels
        uses: pypa/cibuildwheel@v3.0.1
        env:
          CIBW_BUILD: "${{ matrix.python.tag }}-*"
          CIBW_ARCHS: AMD64
          #
          # CIBW_ENVIRONMENT_WINDOWS: >
          #   GITHUB_WORKSPACE="${{ github.workspace }}"

          # CIBW_BEFORE_BUILD_WINDOWS: |
          #   python build_scripts/generate_cmake_presets.py
          #   echo "About to run cmake configure..."
          #   cmake -B build --preset=default -DCMAKE_BUILD_TYPE=Release
          #   echo "Cmake configure finished with exit code: %ERRORLEVEL%"
          #   echo "About to run cmake build..."
          #   cmake --build build -j
          #   cmake --install build
          #
          #   echo "=== Build directory structure ==="
          #   Get-ChildItem -Path build -Recurse -File | Select-Object FullName
          #
          #   echo "`n=== DLL/PYD files ==="
          #   Get-ChildItem -Path build -Recurse -Include *.dll,*.pyd | Format-Table Name, Length, LastWriteTime
          #
          #   echo "`n=== pod5_random_access contents ==="
          #   Get-ChildItem -Path pod5_random_access
          #
          # CIBW_BEFORE_BUILD_WINDOWS: >
          #   python build_scripts/generate_cmake_presets.py &&
          #   echo "About to run cmake configure..." &&
          #   cmake -B build --preset=default -DCMAKE_BUILD_TYPE=Release &&
          #   echo "Cmake configure finished with exit code: %ERRORLEVEL%" &&
          #   echo "About to run cmake build..." &&
          #   cmake --build build -j &&
          #   cmake --install build &&
          #   echo "=== Build directory structure ===" &&
          #   powershell -Command "Get-ChildItem -Path build -Recurse -File | Select-Object FullName" &&
          #   echo "`n=== DLL/PYD files ===" &&
          #   powershell -Command "Get-ChildItem -Path build -Recurse -Include *.dll,*.pyd | Format-Table Name, Length, LastWriteTime" &&
          #   echo "`n=== pod5_random_access contents ===" &&
          #   powershell -Command "Get-ChildItem -Path pod5_random_access"

          # cibuildwheelが準備したPythonを使うように環境変数を設定
          # CIBW_ENVIRONMENT_WINDOWS: >
          #   CMAKE_PREFIX_PATH=%PYTHONHOME%
          #   Python_ROOT_DIR=%PYTHONHOME%
          #   Python3_ROOT_DIR=%PYTHONHOME%
          #
          # CIBW_BEFORE_BUILD_WINDOWS: >
          #   python build_scripts/generate_cmake_presets.py &&
          #   echo "Python executable: %PYTHON%" &&
          #   echo "Python version:" &&
          #   python --version &&
          #   echo "About to run cmake configure..." &&
          #   cmake -B build --preset=default -DPython_EXECUTABLE="%PYTHON%" -DPython3_EXECUTABLE="%PYTHON%" -DPython_ROOT_DIR="%PYTHON%\..\.." -DPython3_ROOT_DIR="%PYTHON%\..\.." &&
          #   echo "Cmake configure finished with exit code: %ERRORLEVEL%" &&
          #   echo "About to run cmake build..." &&
          #   cmake --build build --config Release -j &&
          #   cmake --install build --config Release &&
          #   echo "=== Build directory structure ===" &&
          #   powershell -Command "Get-ChildItem -Path build -Recurse -File | Select-Object FullName" &&
          #   echo "`n=== DLL/PYD files ===" &&
          #   powershell -Command "Get-ChildItem -Path build -Recurse -Include *.dll,*.pyd | Format-Table Name, Length, LastWriteTime" &&
          #   echo "`n=== pod5_random_access contents ===" &&
          #   powershell -Command "Get-ChildItem -Path pod5_random_access"
          CIBW_BEFORE_BUILD_WINDOWS: |
              :: === 1) 現在の Python 実行ファイルのパスを %PY% に格納 ====================
              for /f "delims=" %I in ('python -c "import sys, pathlib; print(pathlib.Path(sys.executable).resolve())"') do set "PY=%I"

              :: === 2) CMake Presets 生成（cibuildwheel の Python を使用） ===============
              "%PY%" build_scripts/generate_cmake_presets.py

              :: === 3) 情報出力 ===========================================================
              echo Python executable: "%PY%"
              "%PY%" --version

              :: === 4) CMake configure  ===================================================
              cmake -B build --preset=default ^
                    -DPython_EXECUTABLE="%PY%" ^
                    -DPython3_EXECUTABLE="%PY%" ^
                    -DPython_FIND_REGISTRY=NEVER ^
                    -DPython3_FIND_REGISTRY=NEVER

              :: === 5) build & install ====================================================
              cmake --build build --config Release -j
              cmake --install build --config Release

              :: === 6) ビルド結果の一覧表示 ==============================================
              powershell -Command "Get-ChildItem -Path build -Recurse -File | Select-Object FullName"
              powershell -Command "Get-ChildItem -Path build -Recurse -Include *.dll,*.pyd | Format-Table Name, Length, LastWriteTime"
              powershell -Command "Get-ChildItem -Path pod5_random_access"
          
          CIBW_TEST_COMMAND: "python -c \"import pod5_random_access; from pod5_random_access.pod5_random_access_pybind import Pod5Index; print('✅ Windows wheel works!')\""
          
          CIBW_SKIP: "pp* *-musllinux* *-win32"
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.python.tag }}
          path: wheelhouse

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Flatten artifacts directory
        run: |
          mkdir -p dist
          find artifacts -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'
      
      - name: Create GitHub Release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for PyPI token
        id: check-token
        run: |
          if [ -n "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to PyPI with API Token
        if: ${{ startsWith(github.ref, 'refs/tags/') && steps.check-token.outputs.has_token == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
      
      - name: Publish to PyPI with Trusted Publishing
        if: ${{ startsWith(github.ref, 'refs/tags/') && steps.check-token.outputs.has_token == 'false' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
