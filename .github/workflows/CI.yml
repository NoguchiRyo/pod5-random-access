name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

permissions:
  contents: read

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: 
          - { version: '3.10', tag: 'cp310' }
          - { version: '3.11', tag: 'cp311' }
          - { version: '3.12', tag: 'cp312' }
        platform:
          - linux
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Build manylinux wheels
        uses: pypa/cibuildwheel@v3.0.1
        env:
          CIBW_BUILD: "${{ matrix.python.tag }}-*"
          CIBW_ARCHS: x86_64
          
          # Install Arrow and dependencies following pod5-file-format DEV.md exactly
          CIBW_BEFORE_BUILD_LINUX: |
            apt update
            apt install -y -V ca-certificates lsb-release wget
            wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
            apt update
            apt install -y cmake libzstd-dev libflatbuffers-dev libarrow-dev=12.0.1-1
          
          # Use standard pip build
          CIBW_BUILD_FRONTEND: "pip"
          
          # Test that the wheel imports correctly
          CIBW_TEST_COMMAND: "python -c 'import pod5_random_access; from pod5_random_access.pod5_random_access_pybind import Pod5Index; print(\"✅ Import successful!\")'"
          
          # Skip musllinux and pypy for now
          CIBW_SKIP: "*-musllinux* pp*"
          
          # auditwheel repair happens automatically with cibuildwheel
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.python.tag }}
          path: wheelhouse

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python: 
          - { version: '3.10', tag: 'cp310' }
          - { version: '3.11', tag: 'cp311' }
          - { version: '3.12', tag: 'cp312' }
        architecture: ['AMD64']
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      
      - name: Create CMakeUserPresets.json
        run: |
          $presets = @{
            version = 2
            configurePresets = @(
              @{
                name = "default"
                inherits = "vcpkg"
                generator = "Visual Studio 17 2022"
                architecture = "x64"
                toolset = "host=x64"
                environment = @{
                  VCPKG_ROOT = "${{ github.workspace }}/vcpkg"
                }
                cacheVariables = @{
                  CMAKE_BUILD_TYPE = "Release"
                  VCPKG_TARGET_TRIPLET = "x64-windows"
                }
              }
            )
          } | ConvertTo-Json -Depth 10
          $presets | Out-File -FilePath "CMakeUserPresets.json" -Encoding utf8
        shell: pwsh
      
      - name: Build Windows wheels
        uses: pypa/cibuildwheel@v3.0.1
        env:
          CIBW_BUILD: "${{ matrix.python.tag }}-*"
          CIBW_ARCHS: AMD64
          
          # Install delvewheel for DLL bundling
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          
          # Set up vcpkg environment
          CIBW_ENVIRONMENT_WINDOWS: >
            VCPKG_ROOT="${{ github.workspace }}\\vcpkg"
            CMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake"
            CMAKE_GENERATOR="Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM="${{ matrix.architecture == 'x64' && 'x64' || 'Win32' }}"
            VCPKG_TARGET_TRIPLET="${{ matrix.architecture }}-windows"
          
          # Use standard pip build 
          CIBW_BUILD_FRONTEND: "pip"
          
          # Test the wheel
          CIBW_TEST_COMMAND: "python -c \"import pod5_random_access; from pod5_random_access.pod5_random_access_pybind import Pod5Index; print('✅ Windows wheel works!')\""
          
          # Repair wheels with delvewheel (Windows equivalent of auditwheel)
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
          
          # Skip pypy, musllinux, and x86 (32-bit)
          CIBW_SKIP: "pp* *-musllinux* *-win32"
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.python.tag }}
          path: wheelhouse

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Flatten artifacts directory
        run: |
          mkdir -p dist
          find artifacts -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'
      
      - name: Create GitHub Release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for PyPI token
        id: check-token
        run: |
          if [ -n "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to PyPI with API Token
        if: ${{ startsWith(github.ref, 'refs/tags/') && steps.check-token.outputs.has_token == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
      
      - name: Publish to PyPI with Trusted Publishing
        if: ${{ startsWith(github.ref, 'refs/tags/') && steps.check-token.outputs.has_token == 'false' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true