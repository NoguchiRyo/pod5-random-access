name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

permissions:
  contents: read

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        platform:
          - manylinux_2_17_x86_64
          - manylinux_2_17_aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Build manylinux wheels
        uses: pypa/cibuildwheel@v2.21.4
        env:
          CIBW_BUILD: "cp${{ replace(matrix.python-version, '.', '') }}-*"
          CIBW_ARCHS: ${{ matrix.platform == 'manylinux_2_17_aarch64' && 'aarch64' || 'x86_64' }}
          
          # Install system dependencies in the manylinux container
          CIBW_BEFORE_BUILD_LINUX: |
            yum update -y
            yum install -y epel-release wget cmake3
            ln -sf /usr/bin/cmake3 /usr/bin/cmake
            wget https://apache.jfrog.io/artifactory/arrow/centos/apache-arrow-release-latest.rpm
            yum install -y apache-arrow-release-latest.rpm
            yum install -y arrow-devel zstd-devel flatbuffers-devel brotli-devel utf8proc-devel re2-devel bzip2-devel lz4-devel snappy-devel libcurl-devel openssl-devel
          
          # Build wheel using our custom build script
          CIBW_BUILD_FRONTEND: "build[uv]"
          
          # Test that the wheel imports correctly
          CIBW_TEST_COMMAND: "python -c 'import pod5_random_access; from pod5_random_access.pod5_random_access_pybind import Pod5Index; print(\"✅ Import successful!\")'"
          
          # Skip musllinux and pypy for now
          CIBW_SKIP: "*-musllinux* pp*"
          
          # auditwheel repair happens automatically with cibuildwheel
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform }}-py${{ replace(matrix.python-version, '.', '') }}
          path: wheelhouse

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        architecture: ['x64', 'x86']
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
      
      - name: Build Windows wheels
        uses: pypa/cibuildwheel@v2.21.4
        env:
          CIBW_BUILD: "cp${{ replace(matrix.python-version, '.', '') }}-*"
          CIBW_ARCHS: ${{ matrix.architecture }}
          
          # Set up vcpkg and dependencies
          CIBW_BEFORE_BUILD_WINDOWS: |
            pip install delvewheel
          
          CIBW_ENVIRONMENT_WINDOWS: >
            VCPKG_ROOT="${{ github.workspace }}\\vcpkg"
            CMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake"
            CMAKE_GENERATOR="Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM="${{ matrix.architecture == 'x64' && 'x64' || 'Win32' }}"
            VCPKG_TARGET_TRIPLET="${{ matrix.architecture }}-windows"
          
          # Install vcpkg dependencies before build
          CIBW_BEFORE_BUILD: |
            vcpkg install --triplet=${{ matrix.architecture }}-windows
          
          # Use our Windows build script
          CIBW_BUILD_FRONTEND: "build[uv]"
          
          # Test the wheel
          CIBW_TEST_COMMAND: "python -c \"import pod5_random_access; from pod5_random_access.pod5_random_access_pybind import Pod5Index; print('✅ Windows wheel works!')\""
          
          # Repair wheels with delvewheel (Windows equivalent of auditwheel)
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
          
          # Skip 32-bit Python 3.10+ (optional, can remove if you want 32-bit support)
          CIBW_SKIP: "cp310-win32 cp311-win32 cp312-win32"
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.architecture }}-py${{ replace(matrix.python-version, '.', '') }}
          path: wheelhouse

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Flatten artifacts directory
        run: |
          mkdir -p dist
          find artifacts -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'
      
      - name: Create GitHub Release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for PyPI token
        id: check-token
        run: |
          if [ -n "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to PyPI with API Token
        if: ${{ startsWith(github.ref, 'refs/tags/') && steps.check-token.outputs.has_token == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
      
      - name: Publish to PyPI with Trusted Publishing
        if: ${{ startsWith(github.ref, 'refs/tags/') && steps.check-token.outputs.has_token == 'false' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true